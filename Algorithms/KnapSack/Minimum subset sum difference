
void SubsetSum(vector<int> &A, int sum,vector<int> &possible)
{
    
    int n = A.size();
    bool dp[n+1][sum+1];
    for(int i = 0 ; i < sum+1; i++)
    {
        dp[0][i] = false;
    }
    for(int i = 0 ; i < n+1; i++)
    {
        dp[i][0] = true;
    }
    
    for(int i = 1 ; i < n+1 ; i++)
    {
        for(int j = 1 ; j < sum+1; j++)
        {
            if(A[i-1] > j)
            {
                dp[i][j] = dp[i-1][j];                
            }
            else
            {
                dp[i][j] = dp[i-1][j] || dp[i-1][j-A[i-1]];
            }
        }
    }
    for(int i = 0 ; i < (sum/2)+1; i++)
    {
        if(dp[n][i]==true)
        {
            possible.push_back(i);
        }
    }
}


int Solution::solve(vector<int> &A) {
    vector<int> possible;
    int sum = 0;
    int mini = INT_MAX;
    for(auto i:A)
    {
        sum+= i;
    }        
    SubsetSum(A,sum,possible);
    
    for(int i = 0 ; i < possible.size(); i++)
    {
        int temp = sum - 2*possible[i];
        mini = min(mini,temp);
    }
    return mini;
}
