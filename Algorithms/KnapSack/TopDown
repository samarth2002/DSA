#include<bits/stdc++.h>

using namespace std;


int KnapSackTopDown(int wt[],int val[],int W,int n,vector<vector<int>> dp)
{

    for(int i = 0 ; i < n+1; i++)
    {
        for(int j = 0 ; j < W+1;j++)
        {
            if(i==0 || j==0)
            {
                dp[i][j] = 0;
            }
            else if(dp[i-1][j]<=W)
            {
                dp[i][j] = max(val[i-1] + dp[i-1][j-wt[i-1]] , dp[i-1][j]);
            }
            else 
            {
                dp[i][j] = dp[i-1][j];
            }
        }
    }
    return dp[n][W];
}

int main()
{

    int wt[] = {1, 3, 4, 5};
    int val[] = {1, 4, 5, 7};
    int W = 7;
    int n = sizeof(wt)/sizeof(int);
    vector<vector<int>> dp(n+1,vector<int>(W+1));

    cout << KnapSackTopDown(wt,val,W,n,dp);


    return 0;
}
