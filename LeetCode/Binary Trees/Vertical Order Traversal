// My failed attempt

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        vector<vector<int>> v;
        
        if(root==NULL){return v;}
        
        queue<pair<TreeNode*,pair<int,int>>> q;
        map<int,map<int,set<int>>> m;
        
        q.push({root,{0,0}});
        
        while(!q.empty())
        {
            int line = q.front().second;
            TreeNode *node = q.front().first;
            q.pop();
            m[line].push_back(node->val);
            if(node->left)
            {
                q.push({node->left,line-1});
            }
            if(node->right)
            {
                q.push({node->right,line+1});
            }
        }
        for(auto i:m)
        {
            v.push_back(i.second);
        }
        return v;
    }
};





// Correct
 vector<vector<int>> verticalTraversal(TreeNode* root) {
        map<int, map<int, multiset<int>>> nodes;
        traverse(root, 0, 0, nodes);
        vector<vector<int>> ans;
        for (auto p : nodes) {
            vector<int> col;
            for (auto q : p.second) {
                col.insert(col.end(), q.second.begin(), q.second.end());
            }
            ans.push_back(col);
        }
        return ans;
    }
private:
    void traverse(TreeNode* root, int x, int y, map<int, map<int, multiset<int>>>& nodes) {
        if (root) {
            nodes[x][y].insert(root -> val);
            traverse(root -> left, x - 1, y + 1, nodes);
            traverse(root -> right, x + 1, y + 1, nodes);
        }
    }
